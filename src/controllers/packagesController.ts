/**
 * CELITECH APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Packages400Error } from '../errors/packages400Error';
import { Packages401Error } from '../errors/packages401Error';
import {
  PackagesResponse,
  packagesResponseSchema,
} from '../models/packagesResponse';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PackagesController extends BaseController {
  /**
   * List of available packages
   *
   * @param destination
   * @param startDate   Start date of the package's validity in the format 'yyyy-MM-dd'. This date can be
   *                              set to the current day or any day within the next 12 months.
   * @param endDate     End date of the package's validity in the format 'yyyy-MM-dd'. End date can be
   *                              maximum 60 days after Start date.
   * @param afterCursor
   * @param limit
   * @param startTime
   * @param endTime
   * @param duration
   * @return Response from the API call
   */
  async listPackages(
    destination?: string,
    startDate?: string,
    endDate?: string,
    afterCursor?: string,
    limit?: number,
    startTime?: number,
    endTime?: number,
    duration?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PackagesResponse>> {
    const req = this.createRequest('GET', '/packages');
    const mapped = req.prepareArgs({
      destination: [destination, optional(string())],
      startDate: [startDate, optional(string())],
      endDate: [endDate, optional(string())],
      afterCursor: [afterCursor, optional(string())],
      limit: [limit, optional(number())],
      startTime: [startTime, optional(number())],
      endTime: [endTime, optional(number())],
      duration: [duration, optional(number())],
    });
    req.query('destination', mapped.destination);
    req.query('startDate', mapped.startDate);
    req.query('endDate', mapped.endDate);
    req.query('afterCursor', mapped.afterCursor);
    req.query('limit', mapped.limit);
    req.query('startTime', mapped.startTime);
    req.query('endTime', mapped.endTime);
    req.query('duration', mapped.duration);
    req.throwOn(400, Packages400Error, 'Bad Request');
    req.throwOn(401, Packages401Error, 'Unauthorized');
    return req.callAsJson(packagesResponseSchema, requestOptions);
  }
}
